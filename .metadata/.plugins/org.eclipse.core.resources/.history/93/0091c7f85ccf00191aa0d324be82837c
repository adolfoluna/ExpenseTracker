package com.tracker.expense.db.dto.home;

import java.util.HashMap;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.tracker.expense.db.dto.MonedaDto;
import com.tracker.expense.db.dto.SearchDto;
import com.tracker.expense.db.home.MonedaBaseHome;
import com.tracker.expense.db.home.MonedaBaseInterceptor;
import com.tracker.expense.db.home.TipocambioHome2;
import com.tracker.expense.db.model.Moneda;
import com.tracker.expense.db.model.MonedaHome;
import com.tracker.expense.web.rest.service.OperationRestResult;

@Stateless
@Remote(PersistenceDtoRemote.class)
@Interceptors(MonedaBaseInterceptor.class)
public class MonedaDtoHome extends ParentPersistenceHome implements PersistenceDtoRemote {
	
	@PersistenceContext private EntityManager entityManager;
	
	@EJB private TipocambioHome2 tipocambioHome;
	@EJB private MonedaHome monedaHome;
	
	private static final Log log = LogFactory.getLog(MonedaDtoHome.class);
	
	@Override
	public String getDtoQuery(SearchDto search) {
		return "select new com.tracker.expense.db.dto.MonedaDto(m.idmoneda,m.nombre,m.monedaBase,m.version) from Moneda m"+addFilters(search);
	}

	@Override
	public String getCountDtoQuery(SearchDto search) {
		return "select count(*) from Moneda m"+addFilters(search);
	}

	@Override
	public Object fromDtoToInstance(Object dto) {
		
		if( !(dto instanceof MonedaDto) )
			return null;
		
		MonedaDto mdto = (MonedaDto) dto;
		Moneda moneda= null;
		
		if( mdto.getIdmoneda() > 0 ) {
			
			moneda = monedaHome.findById(mdto.getIdmoneda());
			
			if( moneda == null )
				return null;
			
			if( moneda.getMonedaBase() <= 0 && mdto.isMonedaBase() )
				eliminarMonedaBase(mdto.getIdmoneda());
		}
		else {
			moneda = new Moneda();
			moneda.setIdmoneda(null);
		}
		
		moneda.setNombre(mdto.getNombre());
		moneda.setVersion(mdto.getVersion());
		
		//de true a false entonces ignorar el cambio
		if( moneda.getIdmoneda() != null && moneda.getMonedaBase() > 0 && !mdto.isMonedaBase() ) {
			moneda.setMonedaBase((byte)1);
			return moneda;
		}
			
		if( mdto.isMonedaBase() )
			moneda.setMonedaBase((byte)1);
		else
			moneda.setMonedaBase((byte)0);
		
		return moneda;
	}

	@Override
	public Object getInstance(SearchDto search) {
		HashMap<String, String> temp = search.getSearhFieldsMap();
		Moneda m = monedaHome.findById(Integer.valueOf(temp.get("idmoneda")));
		return m;
	}
	
	private String addFilters(SearchDto search) {
		
		HashMap<String, String> aux = search.getSearhFieldsMap();
		
		if( aux != null && aux.containsKey("idmoneda") ) 
			return " where m.idmoneda="+Integer.valueOf(aux.get("idmoneda"));
		
		return "";
	}
	
	public OperationRestResult upsertDto(Object dto) {
		
		if( !(dto instanceof MonedaDto) ) return new OperationRestResult(false, "error, argumento no es de tipo MonedaDto, tipo:"+dto.getClass());
		
		boolean eliminarMonedaBase = false;
				
		MonedaDto c = (MonedaDto) dto;
		Moneda e = new Moneda();
		
		//buscar la moneda en caso de estar especificado
		if( c.getIdmoneda() > 0 ) {
			
			//traer instancia de moneda
			e = monedaHome.findById(c.getIdmoneda());
	
			//si hay un cambio de false a true entonces eliminar las otras monedas base
			if( e.getMonedaBase() <= 0 && c.isMonedaBase() )
				eliminarMonedaBase = true;
		}
		
		
		asignarDtoAInstancia(c, e);
		
		try {
			monedaHome.merge(e);
			
			if( eliminarMonedaBase )
				eliminarMonedaBase(e.getIdmoneda());
			
		}catch(Exception ex) {
			return new OperationRestResult(false, "error al intentar persistir instancia "+ex.getMessage());
		}
		
		return new OperationRestResult(true, null);
		
	}
	
	public OperationRestResult removeDto(SearchDto dto) {
		
		HashMap<String, String> temp = dto.getSearhFieldsMap();
		
		if( temp == null ) return new OperationRestResult(false, "error, argumentos de busqueda en null");
		
		if( !temp.containsKey("idmoneda") ) return new OperationRestResult(false, "error, no se encontro argumento idmoneda");
		
		Moneda c = monedaHome.findById(Integer.valueOf(temp.get("idmoneda")));
		
		if( c == null )
			return new OperationRestResult(false, "error, no se encontro moneda con idmoneda:"+temp.get("idmoneda"));
		
		try {
			monedaHome.remove(c);
			return new OperationRestResult(true, null);
		}catch(Exception ex) {
			return new OperationRestResult(false, "error, no se pudo eliminar moneda "+ex.getMessage());
		}
	}

	public OperationRestResult getDto(SearchDto dto) {
		
		HashMap<String, String> temp = dto.getSearhFieldsMap();
		
		if( temp == null ) return new OperationRestResult(false, "error, argumentos de busqueda en null");
		
		if( !temp.containsKey("idmoneda") ) return new OperationRestResult(false, "error, no se encontro argumento idmoneda");
		
		//crear query
		Query q = entityManager.createQuery(monedasQuery()+" where m.idmoneda =:idmoneda");
		
		//poner el parametro de la llave
		q.setParameter("idmoneda", Integer.valueOf(temp.get("idmoneda")));
		
		//intentar obtener instancia
		try {
			MonedaDto res = (MonedaDto) q.getSingleResult();
			OperationRestResult t = new OperationRestResult(true, null);
			t.setData(res);
			return t;
		}catch(NoResultException ex) {
			log.info("error no se entrontro instancia con idmoneda "+temp.get("idmoneda"));
			return new OperationRestResult(false, "error, no se encontro instancia con idmoneda "+temp.get("idmoneda"));
		}catch(Exception ex) {
			ex.printStackTrace();
			return new OperationRestResult(false, "error al intentar consultar moneda con idmoneda "+temp.get("idmoneda")+" "+ex.getMessage());
		}
		
	}
	
	@SuppressWarnings("unchecked")
	public OperationRestResult listDto(SearchDto dto) {
		
		String temp = monedasQuery();
		
		if( dto.isOrderByField("nombre") )
			temp+=" order by m.nombre";
		else
			temp+=" order by m.idmoneda";
		
		//crear Query para obtener la lista de cuentas ordenadas por tipo y nombre
		Query q = entityManager.createQuery(temp);
		
		//en caso de estar especificado, limitar resultados
		if( dto.getLimite() > 0 ) {
			q.setMaxResults(dto.getLimite());
			q.setFirstResult(dto.getPagina()*dto.getLimite());
		}
		
		//objeto que va a contener la lista de resultados
		List<MonedaDto> res = null;
		
		//intentar traer la lista de resultados
		try {
			res = (List<MonedaDto>) q.getResultList();
		}catch(Exception ex) {
			return new OperationRestResult(false, "error al intentar obtener lista "+ex.getMessage());
		}
		
		//crear una resupuesta exitosa
		OperationRestResult rs = new OperationRestResult(true, null);
		
		//agregar el numero total de resultados, esto es un count(*)
		rs.setResults(getMonedasDtoCount());
		
		//agregar los resultados encontrados
		rs.setData(res.toArray(new MonedaDto[0]));
		
		//regresar respuesta
		return rs;
	}
	
	private int getMonedasDtoCount() {
		Query q = entityManager.createQuery("select count(*) from Moneda");
		long count = (long) q.getSingleResult();
		return (int) count;
	}
	
	private void asignarDtoAInstancia(MonedaDto dto,Moneda moneda) {
		
		if( dto.getIdmoneda() > 0 )
			moneda.setIdmoneda(dto.getIdmoneda());
		else
			moneda.setIdmoneda(null);
		
		moneda.setNombre(dto.getNombre());
		moneda.setVersion(dto.getVersion());
		
		//de true a false entonces ignorar el cambio
		if( moneda.getMonedaBase() > 0 && !dto.isMonedaBase() ) {
			moneda.setMonedaBase((byte)1);
			return;
		}
			
		if( dto.isMonedaBase() )
			moneda.setMonedaBase((byte)1);
		else
			moneda.setMonedaBase((byte)0);

	}
	
	private String monedasQuery() {
		return "select new com.tracker.expense.db.dto.MonedaDto(m.idmoneda,m.nombre,m.monedaBase,m.version) from Moneda m";
	}
	
	public void eliminarMonedaBase(int idmoneda) {
		Query q = entityManager.createQuery("update Moneda m set m.monedaBase=0 where m.idmoneda<>:idmoneda");
		q.setParameter("idmoneda", idmoneda);
		q.executeUpdate();
		MonedaBaseHome.clear();
	}

}
