package com.tracker.expense.db.dto.home;

import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import com.tracker.expense.db.dto.CategoriaDto;
import com.tracker.expense.db.dto.SearchDto;
import com.tracker.expense.web.rest.service.OperationRestResult;

public abstract class ParentPersistenceHome {
	
	@PersistenceContext private EntityManager entityManager;
	
	private Class<?> dtoCatalog = CategoriaDto.class;
	
	public ParentPersistenceHome() {
		
	}
	
	/*
	public OperationRestResult upsertDto(Object dto) {
		// TODO Auto-generated method stub
		return null;
	}

	public OperationRestResult removeDto(SearchDto dto) {
		// TODO Auto-generated method stub
		return null;
	}
	*/
	
	public OperationRestResult getDto(SearchDto dto) {
		
		HashMap<String, String> temp = dto.getSearhFieldsMap();
		
		if( temp == null ) return new OperationRestResult(false, "error, argumentos de busqueda en null");
		
		if( !temp.containsKey("idcategoria") ) return new OperationRestResult(false, "error, no se encontro argumento idcategoria");
		
		//crear query
		Query q = entityManager.createQuery(categoriaQuery()+" where c.idcategoria =:idcategoria");
		
		//poner el parametro de la llave
		q.setParameter("idcategoria", Integer.valueOf(temp.get("idcategoria")));
		
		//intentar obtener instancia
		try {
			CategoriaDto res = (CategoriaDto) q.getSingleResult();
			OperationRestResult t = new OperationRestResult(true, null);
			t.setData(res);
			return t;
		}catch(NoResultException ex) {
			log.info("error no se entrontro instancia con idcategoria "+temp.get("idcategoria"));
			return new OperationRestResult(false, "error, no se encontro instancia con idcategoria "+temp.get("idcategoria"));
		}catch(Exception ex) {
			ex.printStackTrace();
			return new OperationRestResult(false, "error al intentar consultar cuenta con idcategoria "+temp.get("idcategoria")+" "+ex.getMessage());
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	public OperationRestResult listDto(SearchDto dto) {
		
		//crear Query para obtener la lista de resultados
		Query q = entityManager.createQuery(getDtoQuery(dto));
		
		//en caso de estar especificado, limitar resultados
		if( dto.getLimite() > 0 ) {
			q.setMaxResults(dto.getLimite());
			q.setFirstResult(dto.getPagina()*dto.getLimite());
		}
		
		//objeto que va a guardar el resultado del query
		List<Object> res2 = null;
		
		//intentar traer la lista de resultados
		try {
			res2 = q.getResultList();
		}catch(Exception ex) {
			return new OperationRestResult(false, "error al intentar obtener lista "+ex.getMessage());
		}
				
		//crear una resupuesta exitosa
		OperationRestResult rs = new OperationRestResult(true, null);
		
		//agregar el numero total de resultados, esto es un count(*)
		rs.setResults(getResultsDtoCount(dto));
		
		//convertir de lista a arreglo y asignarlo a data del resultado
		rs.setData(res2.toArray());

		//regresar respuesta
		return rs;
	}
	
	private int getResultsDtoCount(SearchDto search) {
		Query q = entityManager.createQuery(getCountDtoQuery(search));
		long count = (long) q.getSingleResult();
		return (int) count;
	}
	
	public abstract String getDtoQuery(SearchDto search);
	
	public abstract String getCountDtoQuery(SearchDto search);

	
	
}
