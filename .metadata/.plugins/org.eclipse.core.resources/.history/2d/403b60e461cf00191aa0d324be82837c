package com.tracker.expense.db.dto.home;

import java.util.HashMap;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.tracker.expense.db.dto.ProveedorDto;
import com.tracker.expense.db.dto.SearchDto;
import com.tracker.expense.db.model.Proveedor;
import com.tracker.expense.db.model.ProveedorHome;
import com.tracker.expense.web.rest.service.OperationRestResult;

@Stateless
@Remote(PersistenceDtoRemote.class)
public class ProveedorDtoHome extends ParentPersistenceHome implements PersistenceDtoRemote {

	@PersistenceContext private EntityManager entityManager;
	@EJB private ProveedorHome proveedorHome;
	private static final Log log = LogFactory.getLog(ProveedorDtoHome.class);
	
	@Override
	public String getDtoQuery(SearchDto search) {
		return "select new com.tracker.expense.db.dto.ProveedorDto(p.idproveedor,p.nombre,p.version) from Proveedor p"+addFilters(search)+addOrderFields(search);
	}

	@Override
	public String getCountDtoQuery(SearchDto search) {
		return "select count(*) from Proveedor p"+addFilters(search);
	}

	@Override
	public Object fromDtoToInstance(Object dto) {
		
		if( !(dto instanceof ProveedorDto) )
			return null;
		
		ProveedorDto pdto = (ProveedorDto) dto;
		
		Proveedor proveedor = new Proveedor();
		
		if( pdto.getIdproveedor() > 0 )
			proveedor.setIdproveedor(pdto.getIdproveedor());
		
		proveedor.setNombre(pdto.getNombre().trim());
		proveedor.setVersion(pdto.getVersion());
		
		return proveedor;
	}

	@Override
	public Object getInstance(SearchDto search) {
		Proveedor p = proveedorHome.findById(Integer.valueOf(search.getSearhFieldsMap().get("idproveedor")));
		return p;
	}
	
	private String addFilters(SearchDto search) {
		if( search.getSearhFieldsMap() != null && search.getSearhFieldsMap().containsKey("idproveedor") )
			return " where p.idproveedor="+Integer.valueOf(search.getSearhFieldsMap().get("idproveedor"));
		return "";
	}
	
	private String addOrderFields(SearchDto search) {
		if( search.isOrderByField("nombre") ) return " order by p.nombre";
		else return " order by p.idproveedor";
	}
	/*
	@Override
	public OperationRestResult upsertDto(Object dto) {
		
		if( !(dto instanceof ProveedorDto) ) return new OperationRestResult(false, "error, argumento no es de tipo ProveedorDto, tipo:"+dto.getClass());
		
		ProveedorDto pdto = (ProveedorDto) dto;
		
		Proveedor p = new Proveedor();
		
		if( pdto.getIdproveedor() > 0 )
			p.setIdproveedor(pdto.getIdproveedor());
		
		p.setNombre(pdto.getNombre());
		p.setVersion(pdto.getVersion());
		
		try {
			proveedorHome.merge(p);
		}catch(Exception ex) {
			return new OperationRestResult(false, "error al intentar persistir instancia "+ex.getMessage());
		}
		
		return new OperationRestResult(true, null);
	}

	@Override
	public OperationRestResult removeDto(SearchDto dto) {

		HashMap<String, String> temp = dto.getSearhFieldsMap();
		
		if( temp == null ) return new OperationRestResult(false, "error, argumentos de busqueda en null");
		
		if( !temp.containsKey("idproveedor") ) return new OperationRestResult(false, "error, no se encontro argumento idproveedor");
		
		Proveedor p = proveedorHome.findById(Integer.valueOf(temp.get("idproveedor")));
		
		if( p == null )
			return new OperationRestResult(false, "error, no se encontro proveedor con id:"+temp.get("idproveedor"));
		
		try {
			proveedorHome.remove(p);
			return new OperationRestResult(true, null);
		}catch(Exception ex) {
			return new OperationRestResult(false, "error, no se pudo eliminar proveedor "+ex.getMessage());
		}

	}

	@Override
	public OperationRestResult getDto(SearchDto dto) {

		HashMap<String, String> temp = dto.getSearhFieldsMap();
		
		if( temp == null ) return new OperationRestResult(false, "error, argumentos de busqueda en null");
		
		if( !temp.containsKey("idproveedor") ) return new OperationRestResult(false, "error, no se encontro argumento idproveedor");
		
		//crear query
		Query q = entityManager.createQuery(getProveedorQuery()+" where p.idproveedor =:idproveedor");
		
		//poner el parametro de la llave
		q.setParameter("idproveedor", Integer.valueOf(temp.get("idproveedor")));
		
		//intentar obtener instancia
		try {
			ProveedorDto res = (ProveedorDto) q.getSingleResult();
			OperationRestResult t = new OperationRestResult(true, null);
			t.setData(res);
			return t;
		}catch(NoResultException ex) {
			log.info("error no se entrontro instancia con idproveedor "+temp.get("idproveedor"));
			return new OperationRestResult(false, "error, no se encontro instancia con idproveedor "+temp.get("idproveedor"));
		}catch(Exception ex) {
			ex.printStackTrace();
			return new OperationRestResult(false, "error al intentar consultar proveedor con idproveedor "+temp.get("idproveedor")+" "+ex.getMessage());
		}
	}

	
	@SuppressWarnings("unchecked")
	@Override
	public OperationRestResult listDto(SearchDto dto) {

		String temp = getProveedorQuery();
		
		if( dto.isOrderByField("nombre") )
			temp+=" order by p.nombre";
		else
			temp+=" order by p.idproveedor";
		
		//crear Query para obtener la lista de proveedores ordenadas por nombre o por id
		Query q = entityManager.createQuery(temp);
		
		//en caso de estar especificado, limitar resultados
		if( dto.getLimite() > 0 ) {
			q.setMaxResults(dto.getLimite());
			q.setFirstResult(dto.getPagina()*dto.getLimite());
		}
		
		//objeto que va a contener la lista de resultados
		List<ProveedorDto> res = null;
		
		//intentar traer la lista de resultados
		try {
			res = (List<ProveedorDto>) q.getResultList();
		}catch(Exception ex) {
			return new OperationRestResult(false, "error al intentar obtener lista "+ex.getMessage());
		}
		
		//crear una resupuesta exitosa
		OperationRestResult rs = new OperationRestResult(true, null);
		
		//agregar el numero total de resultados, esto es un count(*)
		rs.setResults(getProveedorDtoCount());
		
		//agregar los resultados encontrados
		rs.setData(res.toArray(new ProveedorDto[0]));
		
		//regresar respuesta
		return rs;
	}
	
	private String getProveedorQuery() {
		return "select new com.tracker.expense.db.dto.ProveedorDto(p.idproveedor,p.nombre,p.version) from Proveedor p";
	}
	
	private int getProveedorDtoCount() {
		Query q = entityManager.createQuery("select count(*) from Proveedor");
		long count = (long) q.getSingleResult();
		return (int) count;
	}
	*/
	

}
