package com.tracker.expense.db.dto.home;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import com.tracker.expense.db.dto.AdvancedSearchDtoField;
import com.tracker.expense.db.dto.AdvancedSearchDtoGroup;
import com.tracker.expense.db.dto.ParamFieldDto;
import com.tracker.expense.db.dto.SearchDto;

@Stateless
public class TransaccionQueryBuilderHome {

	@PersistenceContext private EntityManager entityManager;
	
	public TransaccionQueryBuilderHome() {
		
	}
	
	public Query createQuery(SearchDto search ) {
		
		List<ParamFieldDto> lista = new ArrayList<ParamFieldDto>();
		
		//crear Query para obtener la lista de cuentas ordenadas por tipo y nombre
		Query q = entityManager.createQuery(transaccionQuery()+addSeachFields(search,lista)+addOrderFields(search));
		
		//poner los valores de los parametros si es que hay
		setParameters(q, lista);
		
		//en caso de estar especificado, limitar resultados
		if( search.getLimite() > 0 ) {
			q.setMaxResults(search.getLimite());
			q.setFirstResult(search.getPagina()*search.getLimite());
		}
			
		return q;
	}
	
	public int getResultsCount( SearchDto search ) {
		
		List<ParamFieldDto> lista = new ArrayList<ParamFieldDto>();
		
		//crear query con un count
		Query q = entityManager.createQuery("select count(*) from Transaccion t"+addSeachFields(search,lista));
		
		//poner los valores de los parametros si es que hay
		setParameters(q, lista);
				
		long count = (long) q.getSingleResult();
		return (int) count;
	}
	
	private String addOrderFields(SearchDto search) {
		return " order by date(t.fecha) desc,t.idtransaccion desc";
	}
	
	private String addSeachFields(SearchDto search,List<ParamFieldDto> lista ) {
		
		if( search.getAdvancedSearchGroups() == null || search.getAdvancedSearchGroups().length <= 0 )
			return "";
		
		String temp = " where ";
		
		for( AdvancedSearchDtoGroup group : search.getAdvancedSearchGroups() ) {
			
			if( group == null )
				continue;
			
			if( group.getUnion() != null )
				temp+=" "+group.getUnion();
			
			temp+=" (";
			
			for(AdvancedSearchDtoField field : group.getFields() ) {
				
				if( field.getUnion() != null ) temp+=" "+field.getUnion();
				
				switch(field.getFieldName()) {
					case "1": field.update("1", Integer.class); break;
					case "proveedor": field.update("t.proveedor.idproveedor", Integer.class); break; 
					case "idtransaccion": field.update("t.idtransaccion", Integer.class); break;
					case "articulo": field.update("a.id.idarticulo", Integer.class); break;
					case "ticket": temp+=" t.ticket "+field.getComparator()+" "+field.getFieldValue(); continue;
					case "factura": temp+=" t.factura "+field.getComparator()+" "+field.getFieldValue(); continue;
					case "complemento": temp+=" t.complemento "+field.getComparator()+" "+field.getFieldValue(); continue;
					case "voucher": temp+=" t.voucher "+field.getComparator()+" "+field.getFieldValue(); continue;
					case "requierecomplemento": field.update("t.complementorequerido", Byte.class); break;
					case "fecha":  temp+=" date(t.fecha) "+field.getComparator()+" '"+field.getFieldValue()+"'"; continue;
					case "idcuenta": field.update("t.cuenta.idcuenta", Integer.class); break;
				}
				
				temp+=" "+field.getFieldName()+" "+field.getComparator()+" :param"+lista.size();
				lista.add(new ParamFieldDto("param"+lista.size(), field.getFieldValue(), field.getType()));
				
			}
			
			temp+=" )";
		}

		
		return temp;
	}
	
	private void setParameters(Query query,List<ParamFieldDto> lista ) {
		
		for( ParamFieldDto p : lista ) 
			query.setParameter(p.getName(), p.getParamValue());
		
	}
	
	/*public TransaccionDto(int idtransaccion, int idcuenta, String nombrecuenta, int idproveedor, String nombreproveedor,
	Date fecha, String articulos, long total, double tipocambio, String ticket, String pago, String factura,
	String complemento, String voucher, String nota,int version) {*/
	private String transaccionQuery() {
		return "select new com.tracker.expense.db.dto.TransaccionDto("
				+ "t.idtransaccion,"
				+ "t.cuenta.idcuenta,"
				+ "t.cuenta.nombre,"
				+ "t.proveedor.idproveedor,"
				+ "t.proveedor.nombre,"
				+ "t.fecha,"
				+ "t.articulos,"
				+ "t.total,"
				+ "t.tipocambio,"
				+ "t.ticket,"
				+ "t.pago,"
				+ "t.factura,"
				+ "t.complemento,"
				+ "t.complementorequerido,"
				+ "t.voucher,"
				+ "t.nota,"
				+ "t.version) from Transaccion t";
	}
	
}
